{"version":3,"sources":["notes.js","index.js"],"names":["changeSort","difficulty","localStorage","setItem","renderPage","changeDifficulty","id","getItem","noRefresh","e","preventDefault","clearAll","clear","addNote","newNoteID","document","getElementById","value","parseFloat","loadNotes","loadedNotes","i","title","context","review","checked","search","replace","noteDOM","className","key","style","float","onClick","changeProgress","href","marginLeft","push","setReview","days","date","Date","separator","perDay","parseInt","activeNotes","date2","setDate","getDate","toDateString","ReactDOM","render","ReviewNotes","props","state","response","progress","total","marginBottom","removeReview","React","Component","CreateNote","onSubmit","name","rows","cols","placeholder","margin","LoadNotes"],"mappings":"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","file":"static/js/main.8b000db3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n// Initializng counter for amount of notes and sort type\r\nif (localStorage.getItem(\"note-count\") === null) {\r\n  localStorage.setItem(\"note-count\", 0);\r\n  localStorage.setItem(\"note-sort\", \"none\");\r\n  localStorage.setItem(\"note-review-progress\", 0);\r\n  localStorage.setItem(\"note-review-total\", 0);\r\n}\r\n\r\n/**\r\n * Changes how all of the notes will be sorted upon load\r\n * @param {string} difficulty type of new difficulty to sort by\r\n **/\r\nfunction changeSort(difficulty) {\r\n  // Setting new sort\r\n  localStorage.setItem(\"note-sort\", difficulty);\r\n\r\n  // Refreshing page classes\r\n  renderPage();\r\n}\r\n\r\n/**\r\n * Changes a notes difficulty\r\n * @param {integer} id id of the note to be changed\r\n * @param {string} difficulty notes type of new difficulty\r\n **/\r\nfunction changeDifficulty(id, difficulty) {\r\n  // Setting new difficulty\r\n  localStorage.setItem(\"note-id-\" + id + \"-difficulty\", difficulty);\r\n\r\n  // Refreshing page classes\r\n  renderPage();\r\n}\r\n\r\n// Preventing Site/Page Refresh when entering form\r\nlet noRefresh = function (e) {\r\n  e.preventDefault();\r\n};\r\n\r\n/**\r\n * Removes all of the existing notes\r\n **/\r\nfunction clearAll() {\r\n  localStorage.clear();\r\n  localStorage.setItem(\"note-count\", 0);\r\n  localStorage.setItem(\"note-sort\", \"none\");\r\n  localStorage.setItem(\"note-review-progress\", 0);\r\n  localStorage.setItem(\"note-review-total\", 0);\r\n  // Refreshing page classes\r\n  renderPage();\r\n}\r\n\r\n/**\r\n * Creates a new note\r\n **/\r\nfunction addNote() {\r\n  // Create new note ID\r\n  let newNoteID = localStorage.getItem(\"note-count\");\r\n\r\n  // Store new note data\r\n  localStorage.setItem(\r\n    \"note-id-\" + newNoteID + \"-title\",\r\n    document.getElementById(\"title-\" + newNoteID).value\r\n  );\r\n  localStorage.setItem(\r\n    \"note-id-\" + newNoteID + \"-context\",\r\n    document.getElementById(\"context-\" + newNoteID).value\r\n  );\r\n  localStorage.setItem(\"note-id-\" + newNoteID + \"-visibility\", \"true\");\r\n  localStorage.setItem(\"note-id-\" + newNoteID + \"-difficulty\", \"Medium\");\r\n  localStorage.setItem(\"note-id-\" + newNoteID + \"-review\", \"\");\r\n  localStorage.setItem(\"note-id-\" + newNoteID + \"-checked\", \"false\");\r\n\r\n  // Increasing note counter by 1, locStor returns string so must parse\r\n  localStorage.setItem(\r\n    \"note-count\",\r\n    parseFloat(localStorage.getItem(\"note-count\")) + 1\r\n  );\r\n\r\n  // Resetting text boxes\r\n  document.getElementById(\"title-\" + newNoteID).value = \"\";\r\n  document.getElementById(\"context-\" + newNoteID).value = \"\";\r\n\r\n  // Refreshing page classes\r\n  renderPage();\r\n}\r\n\r\n/**\r\n * Returns all of the notes to be loaded\r\n **/\r\nfunction loadNotes() {\r\n  let loadedNotes = []; // Will Store each loaded note\r\n  // Looping through IDs to load\r\n  for (let i = localStorage.getItem(\"note-count\") - 1; i >= 0; i--) {\r\n    // Getting specific note ID values\r\n    let title = localStorage.getItem(\"note-id-\" + i + \"-title\");\r\n    let context = localStorage.getItem(\"note-id-\" + i + \"-context\");\r\n    let difficulty = localStorage.getItem(\"note-id-\" + i + \"-difficulty\");\r\n    let review = localStorage.getItem(\"note-id-\" + i + \"-review\");\r\n    let checked = localStorage.getItem(\"note-id-\" + i + \"-checked\");\r\n    let search =\r\n      \"https://www.youtube.com/results?search_query=\" + title.replace(\" \", \"+\");\r\n\r\n    let noteDOM = (\r\n      <div className=\"note-style\" key={i}>\r\n        <div style={{ float: \"right\" }}>\r\n          <button onClick={() => changeDifficulty(i, \"Easy\")}>Easy</button>\r\n          <button onClick={() => changeDifficulty(i, \"Medium\")}>Medium</button>\r\n          <button onClick={() => changeDifficulty(i, \"Hard\")}>Hard</button>\r\n        </div>\r\n        <div>\r\n          <b>Difficulty: {difficulty}</b>\r\n        </div>\r\n        {review !== \"\" && (\r\n          <div>\r\n            <br />\r\n            <b>Review by {review}</b>\r\n            {checked === \"false\" && (\r\n              <div style={{ float: \"right\" }}>\r\n                <button onClick={() => changeProgress(i, \"true\")}>\r\n                  In Progress\r\n                </button>\r\n              </div>\r\n            )}\r\n            {checked === \"true\" && (\r\n              <div style={{ float: \"right\" }}>\r\n                <button onClick={() => changeProgress(i, \"false\")}>\r\n                  Completed\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n        <br />\r\n        <div>\r\n          <b>Title</b>\r\n        </div>\r\n        <div>{title}</div>\r\n        <br />\r\n        <div>\r\n          <b>Context</b>\r\n        </div>\r\n        <div>{context}</div>\r\n        <br />\r\n        <div>\r\n          <b>Suggestions</b>\r\n        </div>\r\n        <div>\r\n          <a href={search} style={{ marginLeft: \"10px\" }}>\r\n            Note to YouTube\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    if (localStorage.getItem(\"note-sort\") === \"Easy\") {\r\n      if (difficulty === \"Easy\") {\r\n        loadedNotes.push(noteDOM); // add easy cards\r\n      }\r\n    } else if (localStorage.getItem(\"note-sort\") === \"Medium\") {\r\n      if (difficulty === \"Medium\") {\r\n        loadedNotes.push(noteDOM); // add easy cards\r\n      }\r\n    } else if (localStorage.getItem(\"note-sort\") === \"Hard\") {\r\n      if (difficulty === \"Hard\") {\r\n        loadedNotes.push(noteDOM); // add easy cards\r\n      }\r\n    } else {\r\n      loadedNotes.push(noteDOM); // adding to the loaded notes\r\n    }\r\n  }\r\n  return loadedNotes;\r\n}\r\n\r\n/**\r\n * Changes review setting\r\n * @param {integer} days id of the note to be changed\r\n **/\r\nfunction setReview(days) {\r\n  let date = new Date();\r\n  let separator = 0;\r\n  let perDay = parseInt(localStorage.getItem(\"note-count\") / days);\r\n  if (localStorage.getItem(\"note-count\") / days > perDay) {\r\n    perDay++;\r\n  }\r\n\r\n  let activeNotes = 0;\r\n  // Getting specific note ID values\r\n  for (let i = localStorage.getItem(\"note-count\") - 1; i >= 0; i--) {\r\n    if (localStorage.getItem(\"note-id-\" + i + \"-visibility\") === \"true\") {\r\n      activeNotes++;\r\n    }\r\n  }\r\n  localStorage.setItem(\"note-review-total\", activeNotes);\r\n\r\n  // Resetting sort\r\n  localStorage.setItem(\"note-sort\", \"none\");\r\n  // Getting specific note ID values\r\n  for (let i = localStorage.getItem(\"note-count\") - 1; i >= 0; i--) {\r\n    let date2 = new Date();\r\n    date2.setDate(date.getDate() + separator);\r\n    localStorage.setItem(\"note-id-\" + i + \"-review\", date2.toDateString());\r\n    if (i % perDay === 0) {\r\n      separator++;\r\n    }\r\n  }\r\n\r\n  // Refreshing page classes\r\n  renderPage();\r\n}\r\n\r\n/**\r\n * Changes review setting\r\n **/\r\nfunction removeReview() {\r\n  // Getting specific note ID values\r\n  for (let i = localStorage.getItem(\"note-count\") - 1; i >= 0; i--) {\r\n    localStorage.setItem(\"note-id-\" + i + \"-review\", \"\");\r\n    localStorage.setItem(\"note-id-\" + i + \"-checked\", \"false\");\r\n  }\r\n\r\n  // Reseting review values\r\n  localStorage.setItem(\"note-review-progress\", 0);\r\n  localStorage.setItem(\"note-review-total\", 0);\r\n\r\n  // Refreshing page classes\r\n  renderPage();\r\n}\r\n\r\n/**\r\n * Changes the progress of a note\r\n * @param {integer} i id of the note to be changed\r\n * @param {string} value value of progress\r\n **/\r\nfunction changeProgress(i, value) {\r\n  localStorage.setItem(\"note-id-\" + i + \"-checked\", value);\r\n\r\n  if (value === \"true\") {\r\n    // note is completed\r\n    localStorage.setItem(\r\n      \"note-review-progress\",\r\n      parseInt(localStorage.getItem(\"note-review-progress\")) + 1\r\n    );\r\n  } else {\r\n    localStorage.setItem(\r\n      \"note-review-progress\",\r\n      parseInt(localStorage.getItem(\"note-review-progress\")) - 1\r\n    );\r\n  }\r\n\r\n  // Refreshing page classes\r\n  renderPage();\r\n}\r\n\r\nfunction renderPage() {\r\n  // Refreshing notes\r\n  ReactDOM.render(<LoadNotes />, document.getElementById(\"load-notes\"));\r\n  // Refreshing CreateNote - Updates newNoteID Value\r\n  ReactDOM.render(<CreateNote />, document.getElementById(\"create-note\"));\r\n  // Refreshing review\r\n  ReactDOM.render(<ReviewNotes />, document.getElementById(\"review-notes\"));\r\n}\r\n\r\nexport class ReviewNotes extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { response: \"\" };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    let progress = localStorage.getItem(\"note-review-progress\");\r\n    let total = localStorage.getItem(\"note-review-total\");\r\n    return (\r\n      <div>\r\n        <div style={{ marginBottom: \"10px\" }}>Review Your Notes</div>\r\n        <div>How many days do you want for review?</div>\r\n        <button onClick={() => setReview(2)}>2</button>\r\n        <button onClick={() => setReview(3)}>3</button>\r\n        <button onClick={() => setReview(4)}>4</button>\r\n        <button onClick={() => setReview(5)}>5</button>\r\n        <button onClick={() => setReview(6)}>6</button>\r\n        <button onClick={() => setReview(7)}>7</button>\r\n        <button onClick={() => setReview(8)}>8</button>\r\n        <button onClick={() => setReview(9)}>9</button>\r\n        <button onClick={() => setReview(10)}>10</button>\r\n        <button onClick={() => setReview(11)}>11</button>\r\n        <button onClick={() => setReview(12)}>12</button>\r\n        <button onClick={() => setReview(13)}>13</button>\r\n        <button onClick={() => setReview(14)}>14</button>\r\n        <div>\r\n          <button onClick={() => removeReview()}>\r\n            Dsiabled Review Feature\r\n          </button>\r\n        </div>\r\n        {total !== \"0\" && (\r\n          <div>\r\n            Progress {progress} / {total}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport class CreateNote extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { response: \"\" };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    let title = \"title-\" + localStorage.getItem(\"note-count\");\r\n    let context = \"context-\" + localStorage.getItem(\"note-count\");\r\n    return (\r\n      <div>\r\n        <button onClick={() => changeSort(\"none\")}>Show All</button>\r\n        <button onClick={() => changeSort(\"Easy\")}>Sort Easy</button>\r\n        <button onClick={() => changeSort(\"Medium\")}>Sort Medium</button>\r\n        <button onClick={() => changeSort(\"Hard\")}>Sort Hard</button>\r\n        <button onClick={() => changeSort(\"Rank\")}>Sort Ranked</button>\r\n        <div style={{ marginBottom: \"10px\" }}>Create a note</div>\r\n        Title\r\n        <form onSubmit={noRefresh}>\r\n          <textarea\r\n            id={title}\r\n            name={title}\r\n            rows=\"2\"\r\n            cols=\"50\"\r\n            placeholder=\"Enter a title, theme, or topic here\"\r\n          ></textarea>\r\n        </form>\r\n        Context\r\n        <form onSubmit={noRefresh}>\r\n          <textarea\r\n            id={context}\r\n            name={context}\r\n            rows=\"5\"\r\n            cols=\"50\"\r\n            placeholder=\"Enter the context of the note here\"\r\n          ></textarea>\r\n        </form>\r\n        <button style={{ margin: \"10px\" }} onClick={addNote}>\r\n          Create\r\n        </button>\r\n        <button style={{ margin: \"10px\" }} onClick={clearAll}>\r\n          Clear All\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport class LoadNotes extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { response: \"\" };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    let loadedNotes = []; // Will Store each loaded note\r\n\r\n    if (localStorage.getItem(\"note-sort\") === \"Rank\") {\r\n      localStorage.setItem(\"note-sort\", \"Hard\");\r\n      loadedNotes.push(loadNotes());\r\n      localStorage.setItem(\"note-sort\", \"Medium\");\r\n      loadedNotes.push(loadNotes());\r\n      localStorage.setItem(\"note-sort\", \"Easy\");\r\n      loadedNotes.push(loadNotes());\r\n    } else {\r\n      loadedNotes = loadNotes();\r\n    }\r\n\r\n    return loadedNotes;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { CreateNote } from \"./notes.js\";\r\nimport { LoadNotes } from \"./notes.js\";\r\nimport { ReviewNotes } from \"./notes.js\";\r\n\r\nReactDOM.render(<LoadNotes />, document.getElementById(\"load-notes\"));\r\nReactDOM.render(<CreateNote />, document.getElementById(\"create-note\"));\r\nReactDOM.render(<ReviewNotes />, document.getElementById(\"review-notes\"));\r\n"],"sourceRoot":""}