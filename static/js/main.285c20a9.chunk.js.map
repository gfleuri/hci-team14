{"version":3,"sources":["notes.js","index.js"],"names":["changeSort","difficulty","localStorage","setItem","renderPage","changeDifficulty","id","getItem","noRefresh","e","preventDefault","clearAll","clear","addNote","newNoteID","document","getElementById","value","parseFloat","loadNotes","loadedNotes","i","title","context","review","checked","search","replace","searchGoogle","noteDOM","className","key","onClick","changeProgress","href","push","setReview","days","date","Date","separator","perDay","parseInt","activeNotes","date2","setDate","getDate","toDateString","ReactDOM","render","ReviewNotes","props","state","response","progress","total","removeReview","React","Component","SortNotes","CreateNote","onSubmit","name","rows","cols","placeholder","LoadNotes"],"mappings":"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","file":"static/js/main.285c20a9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n// Initializng counter for amount of notes and sort type\r\nif (localStorage.getItem(\"note-count\") === null) {\r\n  localStorage.setItem(\"note-count\", 0);\r\n  localStorage.setItem(\"note-sort\", \"none\");\r\n  localStorage.setItem(\"note-review-progress\", 0);\r\n  localStorage.setItem(\"note-review-total\", 0);\r\n}\r\n\r\n/**\r\n * Changes how all of the notes will be sorted upon load\r\n * @param {string} difficulty type of new difficulty to sort by\r\n **/\r\nfunction changeSort(difficulty) {\r\n  // Setting new sort\r\n  localStorage.setItem(\"note-sort\", difficulty);\r\n\r\n  // Refreshing page classes\r\n  renderPage();\r\n}\r\n\r\n/**\r\n * Changes a notes difficulty\r\n * @param {integer} id id of the note to be changed\r\n * @param {string} difficulty notes type of new difficulty\r\n **/\r\nfunction changeDifficulty(id, difficulty) {\r\n  // Setting new difficulty\r\n  localStorage.setItem(\"note-id-\" + id + \"-difficulty\", difficulty);\r\n\r\n  // Refreshing page classes\r\n  renderPage();\r\n}\r\n\r\n// Preventing Site/Page Refresh when entering form\r\nlet noRefresh = function (e) {\r\n  e.preventDefault();\r\n};\r\n\r\n/**\r\n * Removes all of the existing notes\r\n **/\r\nfunction clearAll() {\r\n  localStorage.clear();\r\n  localStorage.setItem(\"note-count\", 0);\r\n  localStorage.setItem(\"note-sort\", \"none\");\r\n  localStorage.setItem(\"note-review-progress\", 0);\r\n  localStorage.setItem(\"note-review-total\", 0);\r\n  // Refreshing page classes\r\n  renderPage();\r\n}\r\n\r\n/**\r\n * Creates a new note\r\n **/\r\nfunction addNote() {\r\n  // Create new note ID\r\n  let newNoteID = localStorage.getItem(\"note-count\");\r\n\r\n  // Store new note data\r\n  localStorage.setItem(\r\n    \"note-id-\" + newNoteID + \"-title\",\r\n    document.getElementById(\"title-\" + newNoteID).value\r\n  );\r\n  localStorage.setItem(\r\n    \"note-id-\" + newNoteID + \"-context\",\r\n    document.getElementById(\"context-\" + newNoteID).value\r\n  );\r\n  localStorage.setItem(\"note-id-\" + newNoteID + \"-visibility\", \"true\");\r\n  localStorage.setItem(\"note-id-\" + newNoteID + \"-difficulty\", \"Medium\");\r\n  localStorage.setItem(\"note-id-\" + newNoteID + \"-review\", \"\");\r\n  localStorage.setItem(\"note-id-\" + newNoteID + \"-checked\", \"false\");\r\n\r\n  // Increasing note counter by 1, locStor returns string so must parse\r\n  localStorage.setItem(\r\n    \"note-count\",\r\n    parseFloat(localStorage.getItem(\"note-count\")) + 1\r\n  );\r\n\r\n  // Resetting text boxes\r\n  document.getElementById(\"title-\" + newNoteID).value = \"\";\r\n  document.getElementById(\"context-\" + newNoteID).value = \"\";\r\n\r\n  // Refreshing page classes\r\n  renderPage();\r\n}\r\n\r\n/**\r\n * Returns all of the notes to be loaded\r\n **/\r\nfunction loadNotes() {\r\n  let loadedNotes = []; // Will Store each loaded note\r\n  // Looping through IDs to load\r\n  for (let i = localStorage.getItem(\"note-count\") - 1; i >= 0; i--) {\r\n    // Getting specific note ID values\r\n    let title = localStorage.getItem(\"note-id-\" + i + \"-title\");\r\n    let context = localStorage.getItem(\"note-id-\" + i + \"-context\");\r\n    let difficulty = localStorage.getItem(\"note-id-\" + i + \"-difficulty\");\r\n    let review = localStorage.getItem(\"note-id-\" + i + \"-review\");\r\n    let checked = localStorage.getItem(\"note-id-\" + i + \"-checked\");\r\n    let search =\r\n      \"https://www.youtube.com/results?search_query=\" + title.replace(\" \", \"+\");\r\n    let searchGoogle =\r\n      \"https://www.google.com/search?q=site:edu+\" + title.replace(\" \", \"+\");\r\n\r\n    let noteDOM = (\r\n      <div className=\"note-style\" key={i}>\r\n        <div className=\"note-difficulty-button-container\">\r\n          <button\r\n            className=\"note-button-easy\"\r\n            onClick={() => changeDifficulty(i, \"Easy\")}\r\n          >\r\n            Easy\r\n          </button>\r\n          <button\r\n            className=\"note-button-medium\"\r\n            onClick={() => changeDifficulty(i, \"Medium\")}\r\n          >\r\n            Medium\r\n          </button>\r\n          <button\r\n            className=\"note-button-hard\"\r\n            onClick={() => changeDifficulty(i, \"Hard\")}\r\n          >\r\n            Hard\r\n          </button>\r\n        </div>\r\n        <div className=\"note-difficulty\">Difficulty: {difficulty}</div>\r\n        {review !== \"\" && (\r\n          <div>\r\n            <br />\r\n            <b>Review by {review}</b>\r\n            {checked === \"false\" && (\r\n              <div className=\"note-progress-button-container\">\r\n                <button onClick={() => changeProgress(i, \"true\")}>\r\n                  In Progress\r\n                </button>\r\n              </div>\r\n            )}\r\n            {checked === \"true\" && (\r\n              <div className=\"note-progress-button-container\">\r\n                <button onClick={() => changeProgress(i, \"false\")}>\r\n                  Completed\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n        <br />\r\n        <div className=\"note-title\">Title: {title}</div>\r\n        <br />\r\n        <div className=\"note-context\">{context}</div>\r\n        <br />\r\n        <div>Suggestions</div>\r\n        <br />\r\n        <div>\r\n          <a href={search} className=\"note-youtube-link\">\r\n            <div className=\"note-youtube-link-context\">YouTube Video</div>\r\n          </a>\r\n\r\n          <a href={searchGoogle} className=\"note-google-link\">\r\n            <div className=\"note-google-link-context\">Google Edu</div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    if (localStorage.getItem(\"note-sort\") === \"Easy\") {\r\n      if (difficulty === \"Easy\") {\r\n        loadedNotes.push(noteDOM); // add easy cards\r\n      }\r\n    } else if (localStorage.getItem(\"note-sort\") === \"Medium\") {\r\n      if (difficulty === \"Medium\") {\r\n        loadedNotes.push(noteDOM); // add easy cards\r\n      }\r\n    } else if (localStorage.getItem(\"note-sort\") === \"Hard\") {\r\n      if (difficulty === \"Hard\") {\r\n        loadedNotes.push(noteDOM); // add easy cards\r\n      }\r\n    } else {\r\n      loadedNotes.push(noteDOM); // adding to the loaded notes\r\n    }\r\n  }\r\n  return loadedNotes;\r\n}\r\n\r\n/**\r\n * Changes review setting\r\n * @param {integer} days id of the note to be changed\r\n **/\r\nfunction setReview(days) {\r\n  let date = new Date();\r\n  let separator = 0;\r\n  let perDay = parseInt(localStorage.getItem(\"note-count\") / days);\r\n  if (localStorage.getItem(\"note-count\") / days > perDay) {\r\n    perDay++;\r\n  }\r\n\r\n  let activeNotes = 0;\r\n  // Getting specific note ID values\r\n  for (let i = localStorage.getItem(\"note-count\") - 1; i >= 0; i--) {\r\n    if (localStorage.getItem(\"note-id-\" + i + \"-visibility\") === \"true\") {\r\n      activeNotes++;\r\n    }\r\n  }\r\n  localStorage.setItem(\"note-review-total\", activeNotes);\r\n\r\n  // Resetting sort\r\n  localStorage.setItem(\"note-sort\", \"none\");\r\n  // Getting specific note ID values\r\n  for (let i = localStorage.getItem(\"note-count\") - 1; i >= 0; i--) {\r\n    let date2 = new Date();\r\n    date2.setDate(date.getDate() + separator);\r\n    localStorage.setItem(\"note-id-\" + i + \"-review\", date2.toDateString());\r\n    if (i % perDay === 0) {\r\n      separator++;\r\n    }\r\n  }\r\n\r\n  // Refreshing page classes\r\n  renderPage();\r\n}\r\n\r\n/**\r\n * Changes review setting\r\n **/\r\nfunction removeReview() {\r\n  // Getting specific note ID values\r\n  for (let i = localStorage.getItem(\"note-count\") - 1; i >= 0; i--) {\r\n    localStorage.setItem(\"note-id-\" + i + \"-review\", \"\");\r\n    localStorage.setItem(\"note-id-\" + i + \"-checked\", \"false\");\r\n  }\r\n\r\n  // Reseting review values\r\n  localStorage.setItem(\"note-review-progress\", 0);\r\n  localStorage.setItem(\"note-review-total\", 0);\r\n\r\n  // Refreshing page classes\r\n  renderPage();\r\n}\r\n\r\n/**\r\n * Changes the progress of a note\r\n * @param {integer} i id of the note to be changed\r\n * @param {string} value value of progress\r\n **/\r\nfunction changeProgress(i, value) {\r\n  localStorage.setItem(\"note-id-\" + i + \"-checked\", value);\r\n\r\n  if (value === \"true\") {\r\n    // note is completed\r\n    localStorage.setItem(\r\n      \"note-review-progress\",\r\n      parseInt(localStorage.getItem(\"note-review-progress\")) + 1\r\n    );\r\n  } else {\r\n    localStorage.setItem(\r\n      \"note-review-progress\",\r\n      parseInt(localStorage.getItem(\"note-review-progress\")) - 1\r\n    );\r\n  }\r\n\r\n  // Refreshing page classes\r\n  renderPage();\r\n}\r\n\r\nfunction renderPage() {\r\n  // Refreshing notes\r\n  ReactDOM.render(<LoadNotes />, document.getElementById(\"load-notes\"));\r\n  // Refreshing CreateNote - Updates newNoteID Value\r\n  ReactDOM.render(<CreateNote />, document.getElementById(\"create-note\"));\r\n  // Refreshing review\r\n  ReactDOM.render(<ReviewNotes />, document.getElementById(\"review-notes\"));\r\n  // Refreshing sort\r\n  ReactDOM.render(<SortNotes />, document.getElementById(\"sort-notes\"));\r\n}\r\n\r\nexport class ReviewNotes extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { response: \"\" };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    let progress = localStorage.getItem(\"note-review-progress\");\r\n    let total = localStorage.getItem(\"note-review-total\");\r\n    return (\r\n      <div>\r\n        <div className=\"note-review-title\">\r\n          <b>Review Notes</b>\r\n        </div>\r\n        <div>How many days do you want for review?</div>\r\n        <button\r\n          className=\"note-review-button-days\"\r\n          onClick={() => setReview(2)}\r\n        >\r\n          2\r\n        </button>\r\n        <button\r\n          className=\"note-review-button-days\"\r\n          onClick={() => setReview(3)}\r\n        >\r\n          3\r\n        </button>\r\n        <button\r\n          className=\"note-review-button-days\"\r\n          onClick={() => setReview(4)}\r\n        >\r\n          4\r\n        </button>\r\n        <button\r\n          className=\"note-review-button-days\"\r\n          onClick={() => setReview(5)}\r\n        >\r\n          5\r\n        </button>\r\n        <button\r\n          className=\"note-review-button-days\"\r\n          onClick={() => setReview(6)}\r\n        >\r\n          6\r\n        </button>\r\n        <button\r\n          className=\"note-review-button-days\"\r\n          onClick={() => setReview(7)}\r\n        >\r\n          7\r\n        </button>\r\n        <button\r\n          className=\"note-review-button-days\"\r\n          onClick={() => setReview(8)}\r\n        >\r\n          8\r\n        </button>\r\n        <button\r\n          className=\"note-review-button-days\"\r\n          onClick={() => setReview(9)}\r\n        >\r\n          9\r\n        </button>\r\n        <button\r\n          className=\"note-review-button-days\"\r\n          onClick={() => setReview(10)}\r\n        >\r\n          10\r\n        </button>\r\n        <button\r\n          className=\"note-review-button-days\"\r\n          onClick={() => setReview(11)}\r\n        >\r\n          11\r\n        </button>\r\n        <button\r\n          className=\"note-review-button-days\"\r\n          onClick={() => setReview(12)}\r\n        >\r\n          12\r\n        </button>\r\n        <button\r\n          className=\"note-review-button-days\"\r\n          onClick={() => setReview(13)}\r\n        >\r\n          13\r\n        </button>\r\n        <button\r\n          className=\"note-review-button-days\"\r\n          onClick={() => setReview(14)}\r\n        >\r\n          14\r\n        </button>\r\n        {total !== \"0\" && (\r\n          <div>\r\n            <br />\r\n            <button\r\n              className=\"note-review-button-disable\"\r\n              onClick={() => removeReview()}\r\n            >\r\n              Disabled Review Feature\r\n            </button>\r\n            <br />\r\n            <br />\r\n            <b>\r\n              Progress {progress} / {total}\r\n            </b>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport class SortNotes extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { response: \"\" };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"note-sort-title\">\r\n          <b>Sort Notes</b>\r\n        </div>\r\n        <button onClick={() => changeSort(\"none\")}>Show All</button>\r\n        <button onClick={() => changeSort(\"Easy\")}>Sort Easy</button>\r\n        <button onClick={() => changeSort(\"Medium\")}>Sort Medium</button>\r\n        <button onClick={() => changeSort(\"Hard\")}>Sort Hard</button>\r\n        <button onClick={() => changeSort(\"Rank\")}>Sort Ranked</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport class CreateNote extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { response: \"\" };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    let title = \"title-\" + localStorage.getItem(\"note-count\");\r\n    let context = \"context-\" + localStorage.getItem(\"note-count\");\r\n    return (\r\n      <div>\r\n        <div className=\"note-create-title\">\r\n          <b>Create Notes</b>\r\n        </div>\r\n        Title\r\n        <form onSubmit={noRefresh}>\r\n          <textarea\r\n            id={title}\r\n            name={title}\r\n            rows=\"2\"\r\n            cols=\"50\"\r\n            placeholder=\"Enter a title, theme, or topic here\"\r\n          ></textarea>\r\n        </form>\r\n        Context\r\n        <form onSubmit={noRefresh}>\r\n          <textarea\r\n            id={context}\r\n            name={context}\r\n            rows=\"5\"\r\n            cols=\"50\"\r\n            placeholder=\"Enter the context of the note here\"\r\n          ></textarea>\r\n        </form>\r\n        <button className=\"note-create-submit\" onClick={addNote}>\r\n          Create\r\n        </button>\r\n        <button className=\"note-create-clear\" onClick={clearAll}>\r\n          Clear All\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport class LoadNotes extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { response: \"\" };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    let loadedNotes = []; // Will Store each loaded note\r\n\r\n    if (localStorage.getItem(\"note-sort\") === \"Rank\") {\r\n      localStorage.setItem(\"note-sort\", \"Hard\");\r\n      loadedNotes.push(loadNotes());\r\n      localStorage.setItem(\"note-sort\", \"Medium\");\r\n      loadedNotes.push(loadNotes());\r\n      localStorage.setItem(\"note-sort\", \"Easy\");\r\n      loadedNotes.push(loadNotes());\r\n    } else {\r\n      loadedNotes = loadNotes();\r\n    }\r\n\r\n    return loadedNotes;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { CreateNote } from \"./notes.js\";\r\nimport { LoadNotes } from \"./notes.js\";\r\nimport { ReviewNotes } from \"./notes.js\";\r\nimport { SortNotes } from \"./notes.js\";\r\n\r\nReactDOM.render(<LoadNotes />, document.getElementById(\"load-notes\"));\r\nReactDOM.render(<CreateNote />, document.getElementById(\"create-note\"));\r\nReactDOM.render(<ReviewNotes />, document.getElementById(\"review-notes\"));\r\nReactDOM.render(<SortNotes />, document.getElementById(\"sort-notes\"));\r\n"],"sourceRoot":""}